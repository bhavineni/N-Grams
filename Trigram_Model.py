{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7d652bca",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import nltk \n",
    "import string\n",
    "\n",
    "from nltk.util import ngrams\n",
    "\n",
    "\n",
    "from nltk.corpus import udhr  \n",
    "\n",
    "\n",
    "english = udhr.raw('English-Latin1') \n",
    "french = udhr.raw('French_Francais-Latin1') \n",
    "italian = udhr.raw('Italian_Italiano-Latin1') \n",
    "spanish = udhr.raw('Spanish_Espanol-Latin1')  \n",
    "\n",
    "english_train, english_dev = english[0:1000], english[1000:1100]\n",
    "french_train, french_dev = french[0:1000], french[1000:1100]\n",
    "italian_train, italian_dev = italian[0:1000], italian[1000:1100] \n",
    "spanish_train, spanish_dev = spanish[0:1000], spanish[1000:1100] \n",
    "english_test = udhr.words('English-Latin1')[0:1000] \n",
    "french_test = udhr.words('French_Francais-Latin1')[0:1000]\n",
    "italian_test = udhr.words('Italian_Italiano-Latin1')[0:1000] \n",
    "spanish_test = udhr.words('Spanish_Espanol-Latin1')[0:1000]\n",
    "\n",
    "\n",
    "\n",
    "# Creating training dataset\n",
    "eng_train=list(english_train)\n",
    "\n",
    "#Removing punctuation, special characters, capitalization \n",
    "\n",
    "eng_train = [''.join(c for c in s if c not in string.punctuation) for s in eng_train]\n",
    "\n",
    "\n",
    "eng_train = [s.rstrip() for s in eng_train]\n",
    "\n",
    "eng_train=[item.lower() for item in eng_train]\n",
    "\n",
    "\n",
    "# Creating N grams models\n",
    "\n",
    "unigrams=eng_train\n",
    "\n",
    "\n",
    "bigrams = list(ngrams(eng_train,2))\n",
    "trigrams = list(ngrams(eng_train,3))\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "french_training=list(french_train)\n",
    "\n",
    "\n",
    "french_training = [''.join(c for c in s if c not in string.punctuation) for s in french_training]\n",
    "\n",
    "\n",
    "\n",
    "french_training = [s.rstrip() for s in french_training]\n",
    "\n",
    "french_training=[item.lower() for item in french_training]\n",
    "\n",
    "unigrams_french=french_training\n",
    "\n",
    "\n",
    "\n",
    "trigrams_french = list(ngrams(french_training,3))\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Creating Frequency Distribution\n",
    "fdist1=nltk.FreqDist(trigrams)\n",
    "fdist2=nltk.FreqDist(trigrams_french)\n",
    "\n",
    "\n",
    "eng_test=list(english_test)\n",
    "\n",
    "\n",
    "eng_test = [''.join(c for c in s if c not in string.punctuation) for s in eng_test]\n",
    "\n",
    "\n",
    "eng_test = [s.rstrip() for s in eng_test]\n",
    "\n",
    "eng_test=[item.lower() for item in eng_test]\n",
    "\n",
    "eng_test=[item for item in eng_test if not item.isdigit()]\n",
    "\n",
    "#Calculating Accuracy\n",
    "\n",
    "eng_count = 0\n",
    "french_count = 0\n",
    "\n",
    "def Trigram_model(english_test):\n",
    "    global eng_count\n",
    "    global french_count\n",
    "    for word in english_test:\n",
    "        \n",
    "        eng_tri_prob =1\n",
    "        french_tri_prob=1\n",
    "        word = word.lower()\n",
    "        test_word= list(ngrams(word, 3))\n",
    "        for i in test_word:\n",
    "            eng_tri_prob=eng_tri_prob*fdist1.freq(i)\n",
    "            french_tri_prob=french_tri_prob*fdist2.freq(i)\n",
    "        if eng_tri_prob >= french_tri_prob:\n",
    "            eng_count = eng_count+1\n",
    "        elif eng_tri_prob < french_tri_prob:\n",
    "            french_count = french_count+1\n",
    "    \n",
    "\n",
    "Trigram_model(eng_test)\n",
    "\n",
    "print(\"Accuracy for English is:\",str(eng_count/len(english_test)*100))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
